
0x00000000000a898b: pop qword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xe2e2b; cmovne rax, rdx; ret; 
0x00000000001af8fd: pop qword ptr [rax]; add byte ptr [rax], al; add eax, 0x40; add rax, rdi; ret; 
0x0000000000147cf1: pop qword ptr [rax]; add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000108c15: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x108c24; ret; 
0x000000000008763a: pop qword ptr [rcx + 0x48000000]; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c490a: pop qword ptr [rcx]; add byte ptr [rax], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000087bd1: pop qword ptr [rdx + 0x48000000]; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000dce39: pop qword ptr [rdx]; jbe 0xdce40; ret; 
0x00000000001603a8: pop r11; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000011df1c: pop r11; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001303e7: pop r12; pop r13; cmove eax, edx; pop r14; ret; 
0x0000000000077a36: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000092ade: pop r12; pop r13; pop r14; cmp edx, 1; sbb eax, eax; ret; 
0x000000000002a73e: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002a3de: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000002be4c: pop r12; pop r13; pop r14; ret; 
0x0000000000044d41: pop r12; pop r13; pop rbp; ret; 
0x000000000016c46c: pop r12; pop r13; ret; 
0x000000000011b918: pop r12; pop r14; ret; 
0x0000000000133cdf: pop r12; pop rbp; ret; 
0x0000000000035731: pop r12; ret; 
0x00000000001303e9: pop r13; cmove eax, edx; pop r14; ret; 
0x0000000000077a38: pop r13; mov rax, r9; pop r14; ret; 
0x0000000000092ae0: pop r13; pop r14; cmp edx, 1; sbb eax, eax; ret; 
0x000000000002a740: pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002a3e0: pop r13; pop r14; pop r15; ret; 
0x000000000002be4e: pop r13; pop r14; ret; 
0x0000000000044d43: pop r13; pop rbp; ret; 
0x0000000000041c4a: pop r13; ret; 
0x0000000000092ae2: pop r14; cmp edx, 1; sbb eax, eax; ret; 
0x000000000002a742: pop r14; pop r15; pop rbp; ret; 
0x000000000002a3e2: pop r14; pop r15; ret; 
0x000000000002be50: pop r14; ret; 
0x000000000002a744: pop r15; pop rbp; ret; 
0x000000000002a3e4: pop r15; ret; 
0x000000000008d85f: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000165b59: pop r8; bswap eax; mov eax, eax; mov qword ptr [rcx], rax; mov eax, 1; ret; 
0x0000000000090c12: pop r8; mov byte ptr fs:[0x972], al; cmp eax, 1; je 0x90c28; ret; 
0x0000000000165b76: pop r8; mov eax, 1; ret; 
0x0000000000119894: pop r8; mov rax, qword ptr [rsi + 0x50]; mov qword ptr [rdi + 0x38], rdx; xor rax, 0x20; mov qword ptr [rdi + 0x48], rax; ret; 
0x000000000008e6b1: pop r8; test rax, rax; je 0x8e6c7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000010c361: pop rax; adc byte ptr [rax - 0x7d], cl; add al, 0x24; add dword ptr [rax - 0x77], ecx; ret; 
0x00000000000a9719: pop rax; adc byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000134714: pop rax; add al, 0; lea rdx, [rip + 0x4bbe1]; cmovne rax, rdx; ret; 
0x000000000003f349: pop rax; add al, 0x5b; ret; 
0x00000000000fefba: pop rax; add al, byte ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0x8548; 
0x000000000008d860: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000009e8d4: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000aec09: pop rax; add dword ptr [rcx], esi; sar byte ptr [rax], cl; pop rsi; add eax, 0x83480f75; ret 0xf01; 
0x0000000000050889: pop rax; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000001284ec: pop rax; add rsp, 0x58; ret; 
0x00000000000d6614: pop rax; and ch, dh; dec dword ptr [rcx - 0x77]; ret 0x36e9; 
0x0000000000165b5a: pop rax; bswap eax; mov eax, eax; mov qword ptr [rcx], rax; mov eax, 1; ret; 
0x00000000000ff5f3: pop rax; cmp dh, dh; ret; 
0x00000000000aac12: pop rax; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x00000000000ececa: pop rax; jne 0xeced0; ret; 
0x0000000000090c13: pop rax; mov byte ptr fs:[0x972], al; cmp eax, 1; je 0x90c28; ret; 
0x0000000000165b77: pop rax; mov eax, 1; ret; 
0x000000000003a128: pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003a0b8: pop rax; mov eax, dword ptr [rax + rdx*4]; ret; 
0x00000000000ed021: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000015fd54: pop rax; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000119895: pop rax; mov rax, qword ptr [rsi + 0x50]; mov qword ptr [rdi + 0x38], rdx; xor rax, 0x20; mov qword ptr [rdi + 0x48], rax; ret; 
0x000000000011f493: pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x000000000003a401: pop rax; mov rdx, qword ptr [rip + 0x1de9df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000011958b: pop rax; movdqu xmm1, xmmword ptr [rsi + 0x68]; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm1; ret; 
0x0000000000112faa: pop rax; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x00000000000bea24: pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000147cf8: pop rax; pop rbx; pop rbp; ret; 
0x0000000000090528: pop rax; pop rdx; pop rbx; ret; 
0x0000000000071a2a: pop rax; ret 0xffff; 
0x0000000000045eb0: pop rax; ret; 
0x0000000000045ea3: pop rax; sbb eax, 0; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000008e6b2: pop rax; test rax, rax; je 0x8e6c7; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000001a16e7: pop rax; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000168967: pop rbp; add al, 0xb; add byte ptr [rax - 0x73], cl; adc eax, 0xbf12e; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001986f5: pop rbp; add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001986c1: pop rbp; add al, byte ptr [rax]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000010d569: pop rbp; add byte ptr [rcx + rbx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000096eef: pop rbp; add byte ptr [rcx], bh; ret 0x3b74; 
0x0000000000075111: pop rbp; add dh, dh; ret; 
0x00000000000a63b7: pop rbp; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x0000000000199602: pop rbp; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x00000000000435c9: pop rbp; add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x0000000000133d98: pop rbp; clc; leave; ret; 
0x00000000001303ea: pop rbp; cmove eax, edx; pop r14; ret; 
0x000000000012e26f: pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000011ad09: pop rbp; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000e5cbe: pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000011f441: pop rbp; lea rax, [rip + 0x101ff7]; pop r12; pop r13; ret; 
0x000000000013b77a: pop rbp; mov byte ptr [rdi], 0; pop r12; ret; 
0x0000000000082313: pop rbp; mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x000000000009d2a8: pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000092717: pop rbp; mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000015fdfb: pop rbp; mov eax, r8d; ret; 
0x00000000000ab506: pop rbp; mov qword ptr [r12], 0; pop r12; ret; 
0x00000000000ab3b0: pop rbp; mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x000000000008a27f: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000000da974: pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x000000000003aa17: pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000151bff: pop rbp; mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000007f514: pop rbp; mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x0000000000077a39: pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000160893: pop rbp; movzx eax, al; pop r12; ret; 
0x000000000002a3dd: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000002be4b: pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000041c47: pop rbp; pop r12; pop r13; ret; 
0x0000000000035730: pop rbp; pop r12; ret; 
0x000000000013cf8e: pop rbp; pop r13; pop r14; pop r15; ret; 
0x0000000000092ae1: pop rbp; pop r14; cmp edx, 1; sbb eax, eax; ret; 
0x000000000002a741: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000002a3e1: pop rbp; pop r14; pop r15; ret; 
0x000000000002be4f: pop rbp; pop r14; ret; 
0x0000000000044d44: pop rbp; pop rbp; ret; 
0x0000000000054668: pop rbp; pop rbx; ret; 
0x000000000002a2e0: pop rbp; ret; 
0x00000000001532fe: pop rbp; sub eax, 1; pop r12; pop r13; ret; 
0x00000000000d2a53: pop rbp; sub eax, edx; pop r12; pop r13; pop r14; ret; 
0x000000000013f11f: pop rbp; xchg edx, eax; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x00000000000a9c7e: pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x00000000001171c5: pop rbx; adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000000eaf25: pop rbx; adc eax, dword ptr [rax]; cmp eax, 1; jg 0xeaf40; pop rbx; ret; 
0x00000000000f8be2: pop rbx; add eax, dword ptr [rax]; add byte ptr [rcx + 0x39], cl; ret 0xb74; 
0x0000000000134761: pop rbx; add ecx, edi; dec dword ptr [rax - 0x73]; add eax, 0xfff90234; cmove rax, rdx; ret; 
0x00000000000ead68: pop rbx; and eax, 0xc; pop rbp; pop r12; ret; 
0x00000000000ac06c: pop rbx; cmovne rax, rdx; ret; 
0x00000000000dfd89: pop rbx; cmp dword ptr [rdi], ecx; add byte ptr [rcx + 0x39], al; ret 0x8c0f; 
0x000000000009205e: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x000000000011a9c5: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000005f978: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x00000000001572e4: pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000f4175: pop rbx; mov eax, 1; ret; 
0x0000000000133cee: pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000010d5c6: pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x0000000000112ca0: pop rbx; mov eax, 9; pop rbp; pop r14; ret; 
0x0000000000045ead: pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000921f7: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000096462: pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x00000000001533ff: pop rbx; mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x000000000009a705: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000142f0b: pop rbx; mov qword ptr [r9], rdx; ret; 
0x000000000004605b: pop rbx; mov qword ptr [rip + 0x1d56d9], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001bb6e5: pop rbx; mov qword ptr [rip + 0x5f7cf], 0; ret; 
0x00000000001bb96b: pop rbx; mov qword ptr [rip + 0x64d79], 0; ret; 
0x00000000000e5e27: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000c594f: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000014213f: pop rbx; mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x0000000000082165: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000000a8b38: pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x00000000001279b4: pop rbx; movsxd r12, eax; add rsp, 0x10; mov rax, r12; pop r12; ret; 
0x0000000000142ef5: pop rbx; movsxd rdx, eax; add r10, rdx; mov qword ptr [r9], r10; ret; 
0x0000000000106a74: pop rbx; movzx eax, al; pop rbp; pop r12; pop r13; ret; 
0x0000000000044d40: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000091140: pop rbx; pop r12; pop r13; ret; 
0x0000000000053863: pop rbx; pop r12; ret; 
0x00000000000e5cbd: pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000009d2a7: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000015fdfa: pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000000ab505: pop rbx; pop rbp; mov qword ptr [r12], 0; pop r12; ret; 
0x000000000008a27e: pop rbx; pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000003aa16: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000160892: pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x0000000000040487: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000041c46: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000035850: pop rbx; pop rbp; pop r12; ret; 
0x000000000013cf8d: pop rbx; pop rbp; pop r13; pop r14; pop r15; ret; 
0x0000000000112c98: pop rbx; pop rbp; pop r14; ret; 
0x000000000002a2df: pop rbx; pop rbp; ret; 
0x00000000001532fd: pop rbx; pop rbp; sub eax, 1; pop r12; pop r13; ret; 
0x0000000000035dd1: pop rbx; ret; 
0x000000000004530a: pop rbx; sbb eax, 0x1f88300; jg 0x45338; xor eax, eax; pop rbx; ret; 
0x000000000004533c: pop rbx; sbb eax, 0xc03ce800; add al, 0; xor eax, eax; pop rbx; ret; 
0x0000000000112cee: pop rbx; setl al; ret; 
0x000000000011fa3e: pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a8a31: pop rbx; str word ptr [r8 - 0x73]; add eax, 0x11c94; cmove rax, rdx; ret; 
0x000000000008b63f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000045e7c: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012e3dc: pop rbx; test rax, rax; cmovs rax, rdx; ret; 
0x0000000000199768: pop rbx; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000000133cdc: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000013b777: pop rbx; xor eax, eax; pop rbp; mov byte ptr [rdi], 0; pop r12; ret; 
0x000000000003e44f: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000da06d: pop rcx; adc byte ptr [rcx + 0x29], al; ret; 
0x00000000000e3d79: pop rcx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000adac1: pop rcx; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000a4da3: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x000000000013b509: pop rcx; add dword ptr [rax], esp; je 0x13b486; mov byte ptr [rax + 5], dl; pop rbx; ret; 
0x0000000000041979: pop rcx; add eax, 0x1a0751; ret; 
0x0000000000041954: pop rcx; add eax, 0x1a0786; ret; 
0x00000000000419c4: pop rcx; add eax, 0x1a13fe; ret; 
0x00000000001bb258: pop rcx; idiv bh; mov qword ptr [rip + 0x5f822], 0; add rsp, 8; ret; 
0x00000000000424b3: pop rcx; imul ebx, dword ptr [rip + 0xc76400], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000154663: pop rcx; in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d29d3: pop rcx; jnp 0xd29db; add byte ptr [rbp + 0x29dd75db], al; ret; 
0x0000000000199296: pop rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001722e3: pop rcx; or eax, dword ptr [rax]; cmp eax, 1; jg 0x172300; add rsp, 8; ret; 
0x000000000011f410: pop rcx; pop rbp; pop r12; pop r13; ret; 
0x0000000000108b14: pop rcx; pop rbx; ret; 
0x000000000010d56c: pop rcx; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000011f167: pop rcx; ret 0xf66; 
0x000000000008c6bb: pop rcx; ret; 
0x00000000001263b3: pop rcx; sub cl, byte ptr [rdi]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001260b3: pop rcx; sub eax, 0xd8f7000f; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001afcea: pop rcx; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000014fd23: pop rcx; xchg ch, ch; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000000f9e46: pop rcx; xor eax, eax; pop rbp; ret; 
0x000000000009276c: pop rdi; add byte ptr [rax], al; add byte ptr [rax + 0x16], bh; cmove eax, edx; ret; 
0x000000000019b54d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001a28e7: pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000199877: pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000016b58b: pop rdi; add rsp, 0x10; pop rbp; ret; 
0x00000000001272e7: pop rdi; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000001663f3: pop rdi; and byte ptr [rax + 1], bh; movups xmmword ptr [rcx], xmm3; ret; 
0x0000000000199902: pop rdi; and ch, al; std; xlatb; ret; 
0x000000000014ea4e: pop rdi; cld; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000011abaf: pop rdi; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000017ce19: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000017cc29: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000173587: pop rdi; or al, byte ptr [rax]; test edi, edi; jns 0x173590; ret; 
0x000000000007edf0: pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x000000000017ca49: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000017c879: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000017c975: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000017c8c1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000148135: pop rdi; pcmpgtd mm1, qword ptr [rdi]; outsb dx, byte ptr [rsi]; ret 0x941; 
0x000000000002a745: pop rdi; pop rbp; ret; 
0x00000000001bc10d: pop rdi; ret 0xffe6; 
0x000000000002a3e5: pop rdi; ret; 
0x000000000006aca0: pop rdi; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret; 
0x0000000000132718: pop rdi; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000a0e58: pop rdx; adc byte ptr [rax + 1], cl; ret 0x349; 
0x000000000014962a: pop rdx; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001289fd: pop rdx; add dword ptr [rax - 0x7d], ecx; ret 0x4902; 
0x000000000004e6fa: pop rdx; add dword ptr [rbp + rcx*4 + 0x62], ecx; add ecx, ebp; imul edi, esi, 0xc748ffff; ret 0xffff; 
0x0000000000048b4a: pop rdx; add dword ptr [rbp + rcx*4 + 0x72], ecx; add ecx, ebp; imul edi, esi, 0xc748ffff; ret 0xffff; 
0x000000000009ea52: pop rdx; add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000194636: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x000000000007e999: pop rdx; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000003b6d2: pop rdx; in eax, 0xff; inc dword ptr [rax - 0x76b7bcc8]; ret; 
0x0000000000091ea5: pop rdx; mov eax, 0xc; pop rbx; pop rbp; ret; 
0x0000000000120095: pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x00000000001721a3: pop rdx; or eax, dword ptr [rax]; cmp eax, 1; jg 0x1721c0; add rsp, 8; ret; 
0x000000000011f497: pop rdx; pop r12; ret; 
0x0000000000090529: pop rdx; pop rbx; ret; 
0x0000000000108b13: pop rdx; pop rcx; pop rbx; ret; 
0x00000000000d8145: pop rdx; test al, 0xf0; jne 0xd8170; lea rax, [rdi - 0x10]; ret; 
0x00000000000a8629: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000e9596: pop rsi; adc edx, dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000019b44e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000a9a0b: pop rsi; add dword ptr [rax], eax; lea rdx, [rip + 0xe492b]; cmovne rax, rdx; ret; 
0x00000000001baab6: pop rsi; add eax, 0x29368; ret; 
0x00000000000aec0e: pop rsi; add eax, 0x83480f75; ret 0xf01; 
0x0000000000050cef: pop rsi; add rsp, 0x10; pop rbx; ret; 
0x0000000000092ae3: pop rsi; cmp edx, 1; sbb eax, eax; ret; 
0x000000000011ac4f: pop rsi; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000f4105: pop rsi; jne 0xf4130; mov byte ptr [rax + 8], 0x19; mov eax, 1; ret; 
0x0000000000099641: pop rsi; mov eax, 0x16; ret; 
0x000000000007f389: pop rsi; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000011c41e: pop rsi; mov edi, 0x8948fff0; ret 0x8548; 
0x0000000000199f61: pop rsi; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000001207cd: pop rsi; or byte ptr [rcx - 0xa], al; ret; 
0x00000000000b180e: pop rsi; outsb dx, byte ptr [rsi]; idiv edi; add rsp, 8; ret; 
0x000000000002a743: pop rsi; pop r15; pop rbp; ret; 
0x000000000002a3e3: pop rsi; pop r15; ret; 
0x000000000002be51: pop rsi; ret; 
0x0000000000042f88: pop rsi; sbb eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000096104: pop rsi; xor al, 0x14; add al, ch; ret; 
0x0000000000195480: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000194934: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000c55f0: pop rsp; add dword ptr cs:[rax], eax; cmovne rax, rdx; ret; 
0x0000000000196180: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x00000000000507bb: pop rsp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007eb27: pop rsp; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000000d8f69: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000193310: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000008d3f8: pop rsp; out 0x18, al; add byte ptr [rbx + 0x18e65215], cl; add byte ptr [rbx + 0x1d894803], cl; xor eax, 0x830018e6; ret 0x8901; 
0x00000000000dce38: pop rsp; pop qword ptr [rdx]; jbe 0xdce40; ret; 
0x00000000001303e8: pop rsp; pop r13; cmove eax, edx; pop r14; ret; 
0x0000000000077a37: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000092adf: pop rsp; pop r13; pop r14; cmp edx, 1; sbb eax, eax; ret; 
0x000000000002a73f: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002a3df: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000002be4d: pop rsp; pop r13; pop r14; ret; 
0x0000000000044d42: pop rsp; pop r13; pop rbp; ret; 
0x0000000000041c49: pop rsp; pop r13; ret; 
0x000000000011b919: pop rsp; pop r14; ret; 
0x0000000000133ce0: pop rsp; pop rbp; ret; 
0x0000000000035732: pop rsp; ret; 
0x0000000000114a80: pop rsp; sal bh, 0xff; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000041501: pop rsp; sal edx, 1; movups xmmword ptr [rdx], xmm1; movapd xmm0, xmm2; ret; 
0x00000000000e7129: pop rsp; xchg ebp, eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000131988: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], cl; ret 0x2b48; 
0x00000000000c5504: popfq; add byte ptr [rax], al; add byte ptr [rdx], al; lea rax, [rip + 0x127c0]; cmovne rax, rdx; ret; 
0x000000000010b64f: popfq; iretd; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000068325: popfq; out 0xff, eax; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001238af: popfq; ret 6; 
0x0000000000107c0d: popfq; ret; 
0x0000000000196b60: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000105887: popfq; xor eax, 0x8b4c0011; add byte ptr [rax - 0x77], cl; cmp byte ptr [rcx + rcx*4 - 0x40], cl; ret; 

